# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mcra', [dirname(__file__)])
        except ImportError:
            import _mcra
            return _mcra
        if fp is not None:
            try:
                _mod = imp.load_module('_mcra', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mcra = swig_import_helper()
    del swig_import_helper
else:
    import _mcra
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class NoiseMCRA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseMCRA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseMCRA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alpha_d"] = _mcra.NoiseMCRA_alpha_d_set
    __swig_getmethods__["alpha_d"] = _mcra.NoiseMCRA_alpha_d_get
    if _newclass:
        alpha_d = _swig_property(_mcra.NoiseMCRA_alpha_d_get, _mcra.NoiseMCRA_alpha_d_set)
    __swig_setmethods__["alpha_s"] = _mcra.NoiseMCRA_alpha_s_set
    __swig_getmethods__["alpha_s"] = _mcra.NoiseMCRA_alpha_s_get
    if _newclass:
        alpha_s = _swig_property(_mcra.NoiseMCRA_alpha_s_get, _mcra.NoiseMCRA_alpha_s_set)
    __swig_setmethods__["delta_s"] = _mcra.NoiseMCRA_delta_s_set
    __swig_getmethods__["delta_s"] = _mcra.NoiseMCRA_delta_s_get
    if _newclass:
        delta_s = _swig_property(_mcra.NoiseMCRA_delta_s_get, _mcra.NoiseMCRA_delta_s_set)
    __swig_setmethods__["alpha_p"] = _mcra.NoiseMCRA_alpha_p_set
    __swig_getmethods__["alpha_p"] = _mcra.NoiseMCRA_alpha_p_get
    if _newclass:
        alpha_p = _swig_property(_mcra.NoiseMCRA_alpha_p_get, _mcra.NoiseMCRA_alpha_p_set)
    __swig_setmethods__["b"] = _mcra.NoiseMCRA_b_set
    __swig_getmethods__["b"] = _mcra.NoiseMCRA_b_get
    if _newclass:
        b = _swig_property(_mcra.NoiseMCRA_b_get, _mcra.NoiseMCRA_b_set)
    __swig_setmethods__["L"] = _mcra.NoiseMCRA_L_set
    __swig_getmethods__["L"] = _mcra.NoiseMCRA_L_get
    if _newclass:
        L = _swig_property(_mcra.NoiseMCRA_L_get, _mcra.NoiseMCRA_L_set)
    __swig_setmethods__["ell"] = _mcra.NoiseMCRA_ell_set
    __swig_getmethods__["ell"] = _mcra.NoiseMCRA_ell_get
    if _newclass:
        ell = _swig_property(_mcra.NoiseMCRA_ell_get, _mcra.NoiseMCRA_ell_set)
    __swig_setmethods__["FirstFrame"] = _mcra.NoiseMCRA_FirstFrame_set
    __swig_getmethods__["FirstFrame"] = _mcra.NoiseMCRA_FirstFrame_get
    if _newclass:
        FirstFrame = _swig_property(_mcra.NoiseMCRA_FirstFrame_get, _mcra.NoiseMCRA_FirstFrame_set)
    __swig_setmethods__["lambda_d"] = _mcra.NoiseMCRA_lambda_d_set
    __swig_getmethods__["lambda_d"] = _mcra.NoiseMCRA_lambda_d_get
    if _newclass:
        lambda_d = _swig_property(_mcra.NoiseMCRA_lambda_d_get, _mcra.NoiseMCRA_lambda_d_set)
    __swig_setmethods__["S_last"] = _mcra.NoiseMCRA_S_last_set
    __swig_getmethods__["S_last"] = _mcra.NoiseMCRA_S_last_get
    if _newclass:
        S_last = _swig_property(_mcra.NoiseMCRA_S_last_get, _mcra.NoiseMCRA_S_last_set)
    __swig_setmethods__["S"] = _mcra.NoiseMCRA_S_set
    __swig_getmethods__["S"] = _mcra.NoiseMCRA_S_get
    if _newclass:
        S = _swig_property(_mcra.NoiseMCRA_S_get, _mcra.NoiseMCRA_S_set)
    __swig_setmethods__["Smin_last"] = _mcra.NoiseMCRA_Smin_last_set
    __swig_getmethods__["Smin_last"] = _mcra.NoiseMCRA_Smin_last_get
    if _newclass:
        Smin_last = _swig_property(_mcra.NoiseMCRA_Smin_last_get, _mcra.NoiseMCRA_Smin_last_set)
    __swig_setmethods__["Smin"] = _mcra.NoiseMCRA_Smin_set
    __swig_getmethods__["Smin"] = _mcra.NoiseMCRA_Smin_get
    if _newclass:
        Smin = _swig_property(_mcra.NoiseMCRA_Smin_get, _mcra.NoiseMCRA_Smin_set)
    __swig_setmethods__["Stmp_last"] = _mcra.NoiseMCRA_Stmp_last_set
    __swig_getmethods__["Stmp_last"] = _mcra.NoiseMCRA_Stmp_last_get
    if _newclass:
        Stmp_last = _swig_property(_mcra.NoiseMCRA_Stmp_last_get, _mcra.NoiseMCRA_Stmp_last_set)
    __swig_setmethods__["Stmp"] = _mcra.NoiseMCRA_Stmp_set
    __swig_getmethods__["Stmp"] = _mcra.NoiseMCRA_Stmp_get
    if _newclass:
        Stmp = _swig_property(_mcra.NoiseMCRA_Stmp_get, _mcra.NoiseMCRA_Stmp_set)
    __swig_setmethods__["p"] = _mcra.NoiseMCRA_p_set
    __swig_getmethods__["p"] = _mcra.NoiseMCRA_p_get
    if _newclass:
        p = _swig_property(_mcra.NoiseMCRA_p_get, _mcra.NoiseMCRA_p_set)
    __swig_setmethods__["alpha_tilde"] = _mcra.NoiseMCRA_alpha_tilde_set
    __swig_getmethods__["alpha_tilde"] = _mcra.NoiseMCRA_alpha_tilde_get
    if _newclass:
        alpha_tilde = _swig_property(_mcra.NoiseMCRA_alpha_tilde_get, _mcra.NoiseMCRA_alpha_tilde_set)
    __swig_setmethods__["frm_cnt"] = _mcra.NoiseMCRA_frm_cnt_set
    __swig_getmethods__["frm_cnt"] = _mcra.NoiseMCRA_frm_cnt_get
    if _newclass:
        frm_cnt = _swig_property(_mcra.NoiseMCRA_frm_cnt_get, _mcra.NoiseMCRA_frm_cnt_set)

    def __init__(self):
        this = _mcra.new_NoiseMCRA()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mcra.delete_NoiseMCRA
    __del__ = lambda self: None
NoiseMCRA_swigregister = _mcra.NoiseMCRA_swigregister
NoiseMCRA_swigregister(NoiseMCRA)


def mcra_init():
    return _mcra.mcra_init()
mcra_init = _mcra.mcra_init

def mcra_est(mcra, Y_power):
    return _mcra.mcra_est(mcra, Y_power)
mcra_est = _mcra.mcra_est

def mcra_free(mcra):
    return _mcra.mcra_free(mcra)
mcra_free = _mcra.mcra_free

def printVal(data):
    return _mcra.printVal(data)
printVal = _mcra.printVal

def cal(data):
    return _mcra.cal(data)
cal = _mcra.cal
# This file is compatible with both classic and new-style classes.


